// Generated from src/parser/csl.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class cslLexer extends antlr.Lexer {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly CHATBOX = 3;
    public static readonly HELLO = 4;
    public static readonly TOPIC = 5;
    public static readonly CONSTANCE = 6;
    public static readonly GOTO = 7;
    public static readonly DEFAULT = 8;
    public static readonly MENU = 9;
    public static readonly SAY = 10;
    public static readonly EXIT = 11;
    public static readonly INPUT = 12;
    public static readonly ASSERT = 13;
    public static readonly IF = 14;
    public static readonly ELSE = 15;
    public static readonly ELIF = 16;
    public static readonly LOOP = 17;
    public static readonly WHEN = 18;
    public static readonly BREAK = 19;
    public static readonly CONTINUE = 20;
    public static readonly SILENCE = 21;
    public static readonly MATCH = 22;
    public static readonly SET = 23;
    public static readonly GLOBAL = 24;
    public static readonly FETCH = 25;
    public static readonly POST = 26;
    public static readonly OR = 27;
    public static readonly AND = 28;
    public static readonly NOT = 29;
    public static readonly STRING = 30;
    public static readonly QUOTE = 31;
    public static readonly DIGIT = 32;
    public static readonly INTS = 33;
    public static readonly FLOATS = 34;
    public static readonly ARROW = 35;
    public static readonly ASSIGN = 36;
    public static readonly EQUAL = 37;
    public static readonly COLON = 38;
    public static readonly SEMICOLON = 39;
    public static readonly COMMA = 40;
    public static readonly LPAREN = 41;
    public static readonly RPAREN = 42;
    public static readonly LBRACE = 43;
    public static readonly RBRACE = 44;
    public static readonly LBRACK = 45;
    public static readonly RBRACK = 46;
    public static readonly DOLLAR = 47;
    public static readonly PLUS = 48;
    public static readonly MINUS = 49;
    public static readonly MULTIPLY = 50;
    public static readonly DIVIDE = 51;
    public static readonly GREATER = 52;
    public static readonly GREATER_EQUAL = 53;
    public static readonly LESS = 54;
    public static readonly LESS_EQUAL = 55;
    public static readonly NOT_EQUAL = 56;
    public static readonly BANG = 57;
    public static readonly MOD = 58;
    public static readonly DOT = 59;
    public static readonly ID = 60;
    public static readonly WS = 61;
    public static readonly COMMENT = 62;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'`'", "'\\'", "'chatbox'", "'hello'", "'topic'", "'constance'", 
        "'goto'", "'default'", "'menu'", "'say'", "'exit'", "'input'", "'assert'", 
        "'if'", "'else'", "'elif'", "'loop'", "'when'", "'break'", "'continue'", 
        "'silence'", "'match'", "'set'", "'global'", "'fetch'", "'post'", 
        "'or'", "'and'", "'not'", null, null, null, null, null, "'=>'", 
        "':='", "'='", "':'", "';'", "','", "'('", "')'", "'{'", "'}'", 
        "'['", "']'", "'$'", "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", 
        "'<'", "'<='", "'<>'", "'!'", "'%'", "'.'"
    ];

    public static readonly symbolicNames = [
        null, null, null, "CHATBOX", "HELLO", "TOPIC", "CONSTANCE", "GOTO", 
        "DEFAULT", "MENU", "SAY", "EXIT", "INPUT", "ASSERT", "IF", "ELSE", 
        "ELIF", "LOOP", "WHEN", "BREAK", "CONTINUE", "SILENCE", "MATCH", 
        "SET", "GLOBAL", "FETCH", "POST", "OR", "AND", "NOT", "STRING", 
        "QUOTE", "DIGIT", "INTS", "FLOATS", "ARROW", "ASSIGN", "EQUAL", 
        "COLON", "SEMICOLON", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
        "LBRACK", "RBRACK", "DOLLAR", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
        "GREATER", "GREATER_EQUAL", "LESS", "LESS_EQUAL", "NOT_EQUAL", "BANG", 
        "MOD", "DOT", "ID", "WS", "COMMENT"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "T__0", "T__1", "CHATBOX", "HELLO", "TOPIC", "CONSTANCE", "GOTO", 
        "DEFAULT", "MENU", "SAY", "EXIT", "INPUT", "ASSERT", "IF", "ELSE", 
        "ELIF", "LOOP", "WHEN", "BREAK", "CONTINUE", "SILENCE", "MATCH", 
        "SET", "GLOBAL", "FETCH", "POST", "OR", "AND", "NOT", "STRING", 
        "QUOTE", "DIGIT", "INTS", "FLOATS", "ARROW", "ASSIGN", "EQUAL", 
        "COLON", "SEMICOLON", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
        "LBRACK", "RBRACK", "DOLLAR", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
        "GREATER", "GREATER_EQUAL", "LESS", "LESS_EQUAL", "NOT_EQUAL", "BANG", 
        "MOD", "DOT", "ID", "WS", "COMMENT",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, cslLexer._ATN, cslLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "csl.g4"; }

    public get literalNames(): (string | null)[] { return cslLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return cslLexer.symbolicNames; }
    public get ruleNames(): string[] { return cslLexer.ruleNames; }

    public get serializedATN(): number[] { return cslLexer._serializedATN; }

    public get channelNames(): string[] { return cslLexer.channelNames; }

    public get modeNames(): string[] { return cslLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,62,407,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,5,29,289,8,29,10,29,12,29,292,9,29,1,29,1,29,1,29,
        1,29,1,29,5,29,299,8,29,10,29,12,29,302,9,29,1,29,3,29,305,8,29,
        1,30,1,30,1,31,4,31,310,8,31,11,31,12,31,311,1,32,4,32,315,8,32,
        11,32,12,32,316,1,33,4,33,320,8,33,11,33,12,33,321,1,33,1,33,4,33,
        326,8,33,11,33,12,33,327,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,
        1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,
        1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,
        1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,55,
        1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,5,59,387,8,59,
        10,59,12,59,390,9,59,1,60,4,60,393,8,60,11,60,12,60,394,1,60,1,60,
        1,61,1,61,5,61,401,8,61,10,61,12,61,404,9,61,1,61,1,61,0,0,62,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
        47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
        57,115,58,117,59,119,60,121,61,123,62,1,0,8,1,0,34,34,1,0,39,39,
        2,0,34,34,39,39,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,418,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
        93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
        0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,
        0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,
        121,1,0,0,0,0,123,1,0,0,0,1,125,1,0,0,0,3,127,1,0,0,0,5,129,1,0,
        0,0,7,137,1,0,0,0,9,143,1,0,0,0,11,149,1,0,0,0,13,159,1,0,0,0,15,
        164,1,0,0,0,17,172,1,0,0,0,19,177,1,0,0,0,21,181,1,0,0,0,23,186,
        1,0,0,0,25,192,1,0,0,0,27,199,1,0,0,0,29,202,1,0,0,0,31,207,1,0,
        0,0,33,212,1,0,0,0,35,217,1,0,0,0,37,222,1,0,0,0,39,228,1,0,0,0,
        41,237,1,0,0,0,43,245,1,0,0,0,45,251,1,0,0,0,47,255,1,0,0,0,49,262,
        1,0,0,0,51,268,1,0,0,0,53,273,1,0,0,0,55,276,1,0,0,0,57,280,1,0,
        0,0,59,304,1,0,0,0,61,306,1,0,0,0,63,309,1,0,0,0,65,314,1,0,0,0,
        67,319,1,0,0,0,69,329,1,0,0,0,71,332,1,0,0,0,73,335,1,0,0,0,75,337,
        1,0,0,0,77,339,1,0,0,0,79,341,1,0,0,0,81,343,1,0,0,0,83,345,1,0,
        0,0,85,347,1,0,0,0,87,349,1,0,0,0,89,351,1,0,0,0,91,353,1,0,0,0,
        93,355,1,0,0,0,95,357,1,0,0,0,97,359,1,0,0,0,99,361,1,0,0,0,101,
        363,1,0,0,0,103,365,1,0,0,0,105,367,1,0,0,0,107,370,1,0,0,0,109,
        372,1,0,0,0,111,375,1,0,0,0,113,378,1,0,0,0,115,380,1,0,0,0,117,
        382,1,0,0,0,119,384,1,0,0,0,121,392,1,0,0,0,123,398,1,0,0,0,125,
        126,5,96,0,0,126,2,1,0,0,0,127,128,5,92,0,0,128,4,1,0,0,0,129,130,
        5,99,0,0,130,131,5,104,0,0,131,132,5,97,0,0,132,133,5,116,0,0,133,
        134,5,98,0,0,134,135,5,111,0,0,135,136,5,120,0,0,136,6,1,0,0,0,137,
        138,5,104,0,0,138,139,5,101,0,0,139,140,5,108,0,0,140,141,5,108,
        0,0,141,142,5,111,0,0,142,8,1,0,0,0,143,144,5,116,0,0,144,145,5,
        111,0,0,145,146,5,112,0,0,146,147,5,105,0,0,147,148,5,99,0,0,148,
        10,1,0,0,0,149,150,5,99,0,0,150,151,5,111,0,0,151,152,5,110,0,0,
        152,153,5,115,0,0,153,154,5,116,0,0,154,155,5,97,0,0,155,156,5,110,
        0,0,156,157,5,99,0,0,157,158,5,101,0,0,158,12,1,0,0,0,159,160,5,
        103,0,0,160,161,5,111,0,0,161,162,5,116,0,0,162,163,5,111,0,0,163,
        14,1,0,0,0,164,165,5,100,0,0,165,166,5,101,0,0,166,167,5,102,0,0,
        167,168,5,97,0,0,168,169,5,117,0,0,169,170,5,108,0,0,170,171,5,116,
        0,0,171,16,1,0,0,0,172,173,5,109,0,0,173,174,5,101,0,0,174,175,5,
        110,0,0,175,176,5,117,0,0,176,18,1,0,0,0,177,178,5,115,0,0,178,179,
        5,97,0,0,179,180,5,121,0,0,180,20,1,0,0,0,181,182,5,101,0,0,182,
        183,5,120,0,0,183,184,5,105,0,0,184,185,5,116,0,0,185,22,1,0,0,0,
        186,187,5,105,0,0,187,188,5,110,0,0,188,189,5,112,0,0,189,190,5,
        117,0,0,190,191,5,116,0,0,191,24,1,0,0,0,192,193,5,97,0,0,193,194,
        5,115,0,0,194,195,5,115,0,0,195,196,5,101,0,0,196,197,5,114,0,0,
        197,198,5,116,0,0,198,26,1,0,0,0,199,200,5,105,0,0,200,201,5,102,
        0,0,201,28,1,0,0,0,202,203,5,101,0,0,203,204,5,108,0,0,204,205,5,
        115,0,0,205,206,5,101,0,0,206,30,1,0,0,0,207,208,5,101,0,0,208,209,
        5,108,0,0,209,210,5,105,0,0,210,211,5,102,0,0,211,32,1,0,0,0,212,
        213,5,108,0,0,213,214,5,111,0,0,214,215,5,111,0,0,215,216,5,112,
        0,0,216,34,1,0,0,0,217,218,5,119,0,0,218,219,5,104,0,0,219,220,5,
        101,0,0,220,221,5,110,0,0,221,36,1,0,0,0,222,223,5,98,0,0,223,224,
        5,114,0,0,224,225,5,101,0,0,225,226,5,97,0,0,226,227,5,107,0,0,227,
        38,1,0,0,0,228,229,5,99,0,0,229,230,5,111,0,0,230,231,5,110,0,0,
        231,232,5,116,0,0,232,233,5,105,0,0,233,234,5,110,0,0,234,235,5,
        117,0,0,235,236,5,101,0,0,236,40,1,0,0,0,237,238,5,115,0,0,238,239,
        5,105,0,0,239,240,5,108,0,0,240,241,5,101,0,0,241,242,5,110,0,0,
        242,243,5,99,0,0,243,244,5,101,0,0,244,42,1,0,0,0,245,246,5,109,
        0,0,246,247,5,97,0,0,247,248,5,116,0,0,248,249,5,99,0,0,249,250,
        5,104,0,0,250,44,1,0,0,0,251,252,5,115,0,0,252,253,5,101,0,0,253,
        254,5,116,0,0,254,46,1,0,0,0,255,256,5,103,0,0,256,257,5,108,0,0,
        257,258,5,111,0,0,258,259,5,98,0,0,259,260,5,97,0,0,260,261,5,108,
        0,0,261,48,1,0,0,0,262,263,5,102,0,0,263,264,5,101,0,0,264,265,5,
        116,0,0,265,266,5,99,0,0,266,267,5,104,0,0,267,50,1,0,0,0,268,269,
        5,112,0,0,269,270,5,111,0,0,270,271,5,115,0,0,271,272,5,116,0,0,
        272,52,1,0,0,0,273,274,5,111,0,0,274,275,5,114,0,0,275,54,1,0,0,
        0,276,277,5,97,0,0,277,278,5,110,0,0,278,279,5,100,0,0,279,56,1,
        0,0,0,280,281,5,110,0,0,281,282,5,111,0,0,282,283,5,116,0,0,283,
        58,1,0,0,0,284,290,5,34,0,0,285,286,5,92,0,0,286,289,5,34,0,0,287,
        289,8,0,0,0,288,285,1,0,0,0,288,287,1,0,0,0,289,292,1,0,0,0,290,
        288,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,
        305,5,34,0,0,294,300,5,39,0,0,295,296,5,92,0,0,296,299,5,39,0,0,
        297,299,8,1,0,0,298,295,1,0,0,0,298,297,1,0,0,0,299,302,1,0,0,0,
        300,298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,
        303,305,5,39,0,0,304,284,1,0,0,0,304,294,1,0,0,0,305,60,1,0,0,0,
        306,307,7,2,0,0,307,62,1,0,0,0,308,310,7,3,0,0,309,308,1,0,0,0,310,
        311,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,64,1,0,0,0,313,315,
        3,63,31,0,314,313,1,0,0,0,315,316,1,0,0,0,316,314,1,0,0,0,316,317,
        1,0,0,0,317,66,1,0,0,0,318,320,3,63,31,0,319,318,1,0,0,0,320,321,
        1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,325,
        5,46,0,0,324,326,3,63,31,0,325,324,1,0,0,0,326,327,1,0,0,0,327,325,
        1,0,0,0,327,328,1,0,0,0,328,68,1,0,0,0,329,330,5,61,0,0,330,331,
        5,62,0,0,331,70,1,0,0,0,332,333,5,58,0,0,333,334,5,61,0,0,334,72,
        1,0,0,0,335,336,5,61,0,0,336,74,1,0,0,0,337,338,5,58,0,0,338,76,
        1,0,0,0,339,340,5,59,0,0,340,78,1,0,0,0,341,342,5,44,0,0,342,80,
        1,0,0,0,343,344,5,40,0,0,344,82,1,0,0,0,345,346,5,41,0,0,346,84,
        1,0,0,0,347,348,5,123,0,0,348,86,1,0,0,0,349,350,5,125,0,0,350,88,
        1,0,0,0,351,352,5,91,0,0,352,90,1,0,0,0,353,354,5,93,0,0,354,92,
        1,0,0,0,355,356,5,36,0,0,356,94,1,0,0,0,357,358,5,43,0,0,358,96,
        1,0,0,0,359,360,5,45,0,0,360,98,1,0,0,0,361,362,5,42,0,0,362,100,
        1,0,0,0,363,364,5,47,0,0,364,102,1,0,0,0,365,366,5,62,0,0,366,104,
        1,0,0,0,367,368,5,62,0,0,368,369,5,61,0,0,369,106,1,0,0,0,370,371,
        5,60,0,0,371,108,1,0,0,0,372,373,5,60,0,0,373,374,5,61,0,0,374,110,
        1,0,0,0,375,376,5,60,0,0,376,377,5,62,0,0,377,112,1,0,0,0,378,379,
        5,33,0,0,379,114,1,0,0,0,380,381,5,37,0,0,381,116,1,0,0,0,382,383,
        5,46,0,0,383,118,1,0,0,0,384,388,7,4,0,0,385,387,7,5,0,0,386,385,
        1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,120,
        1,0,0,0,390,388,1,0,0,0,391,393,7,6,0,0,392,391,1,0,0,0,393,394,
        1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,397,
        6,60,0,0,397,122,1,0,0,0,398,402,5,35,0,0,399,401,8,7,0,0,400,399,
        1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,405,
        1,0,0,0,404,402,1,0,0,0,405,406,6,61,0,0,406,124,1,0,0,0,13,0,288,
        290,298,300,304,311,316,321,327,388,394,402,1,6,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!cslLexer.__ATN) {
            cslLexer.__ATN = new antlr.ATNDeserializer().deserialize(cslLexer._serializedATN);
        }

        return cslLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(cslLexer.literalNames, cslLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return cslLexer.vocabulary;
    }

    private static readonly decisionsToDFA = cslLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}